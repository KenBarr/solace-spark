// package org.twitterstreaming.receiver


// import java.io.IOException
// import java.util.Optional
// import java.util.concurrent.{ArrayBlockingQueue, BlockingQueue, TimeUnit}
// import java.sql.Timestamp

// import scala.collection.JavaConverters._
// import twitter4j.auth.OAuthAuthorization
// import twitter4j.conf.ConfigurationBuilder
// import twitter4j.Status
// import twitter4j.StatusListener
// import twitter4j.StatusDeletionNotice
// import twitter4j.StallWarning
// import twitter4j.TwitterStream
// import twitter4j.TwitterStreamFactory
// import org.apache.spark.internal.Logging
// import org.apache.spark.sql.Row
// import org.apache.spark.sql.sources.DataSourceRegister
// import org.apache.spark.sql.sources.v2.reader.{DataReader, DataReaderFactory}
// import org.apache.spark.sql.sources.v2.reader.streaming.{MicroBatchReader, Offset}
// import org.apache.spark.sql.sources.v2.{DataSourceOptions, DataSourceV2, MicroBatchReadSupport}
// import org.apache.spark.sql.types._


// import scala.collection.mutable.ListBuffer


// class MyStreamingSource extends DataSourceV2 with MicroBatchReadSupport with DataSourceRegister with Logging {

//   override def createMicroBatchReader(
//                                        schema: Optional[StructType],
//                                        checkpointLocation: String,
//                                        options: DataSourceOptions): MicroBatchReader = {
//     new MyStreamMicroBatchReader(options)
//   }

//   override def shortName(): String = "my"
// }

// class MyStreamMicroBatchReader(options: DataSourceOptions) extends MicroBatchReader with Logging {

//   private val NO_DATA_OFFSET = MyOffset(-1)

//   private var startOffset: MyOffset = new MyOffset(-1)
//   private var endOffset: MyOffset = new MyOffset(-1)

//   private var currentOffset: MyOffset = new MyOffset(-1)
//   private var lastReturnedOffset: MyOffset = new MyOffset(-2)
//   private var lastOffsetCommitted : MyOffset = new MyOffset(-1)

//   private var incomingEventCounter = 0;
//   private var stopped:Boolean = false

//   private var myStream:MyStream = null
//   private var worker:Thread = null

//   private val tweetList:ListBuffer[Status] = new ListBuffer[Status]()
//   private var myQueue:BlockingQueue[Status] = null

//   initialize()

//   private def initialize(): Unit = synchronized {


//     myQueue = new ArrayBlockingQueue(queueSize)

//     val configBuilder:ConfigurationBuilder  = new ConfigurationBuilder()
//     configBuilder.setOAuthConsumerKey(consumerKey).setOAuthConsumerSecret(consumerSecret)
//     configBuilder.setOAuthAccessToken(accessToken).setOAuthAccessTokenSecret(accessTokenSecret)

//     val twitterAuth = new OAuthAuthorization(configBuilder.build())
//     twitterStream = new TwitterStreamFactory().getInstance(twitterAuth)

//     twitterStream.addListener(new StatusListener {
//       def onStatus(status: Status): Unit = {
//         tweetQueue.add(status)
//       }
//       // Unimplemented
//       def onDeletionNotice(statusDeletionNotice: StatusDeletionNotice) {}
//       def onTrackLimitationNotice(i: Int) {}
//       def onScrubGeo(l: Long, l1: Long) {}
//       def onStallWarning(stallWarning: StallWarning) {}
//       def onException(e: Exception) {
//         /*if (!stopped) {
//           restart("Error receiving tweets", e)
//         }*/
//       }
//     })

//     worker = new Thread("Tweet Worker") {
//       setDaemon(true)
//       override def run() {
//         receive()
//       }
//     }
//     worker.start()

//     // start receiving tweets
//     twitterStream.sample()
//   }

//   private def receive(): Unit = {

//     while(!stopped) {
//         // poll tweets from queue
//         val tweet:Status = tweetQueue.poll(100, TimeUnit.MILLISECONDS)

//         if (tweet != null) {

//           tweetList.append(tweet);
//           currentOffset = currentOffset + 1

//           incomingEventCounter = incomingEventCounter + 1;
//         }
//       }
//   }


//   override def createDataReaderFactories(): java.util.List[DataReaderFactory[Row]] = {
//     synchronized {
//       val startOrdinal = startOffset.offset.toInt + 1
//       val endOrdinal = endOffset.offset.toInt + 1

//       internalLog(s"createDataReaderFactories: sOrd: $startOrdinal, eOrd: $endOrdinal, " +
//         s"lastOffsetCommitted: $lastOffsetCommitted")

//       val newBlocks = synchronized {
//         val sliceStart = startOrdinal - lastOffsetCommitted.offset.toInt - 1
//         val sliceEnd = endOrdinal - lastOffsetCommitted.offset.toInt - 1
//         assert(sliceStart <= sliceEnd, s"sliceStart: $sliceStart sliceEnd: $sliceEnd")
//         tweetList.slice(sliceStart, sliceEnd)
//       }

//       newBlocks.grouped(numPartitions).map { block =>
//         new TweetStreamBatchTask(block).asInstanceOf[DataReaderFactory[Row]]
//       }.toList.asJava
//     }
//   }

//   override def setOffsetRange(start: Optional[Offset],
//                               end: Optional[Offset]): Unit = {

//     if (start.isPresent && start.get().asInstanceOf[TwitterOffset].offset != currentOffset.offset) {
//       internalLog(s"setOffsetRange: start: $start, end: $end currentOffset: $currentOffset")
//     }

//     this.startOffset = start.orElse(NO_DATA_OFFSET).asInstanceOf[TwitterOffset]
//     this.endOffset = end.orElse(currentOffset).asInstanceOf[TwitterOffset]
//   }

//   override def getStartOffset(): Offset = {
//     internalLog("getStartOffset was called")
//     if (startOffset.offset == -1) {
//       throw new IllegalStateException("startOffset is -1")
//     }
//     startOffset
//   }

//   override def getEndOffset(): Offset = {
//     if (endOffset.offset == -1) {
//       currentOffset
//     } else {

//       if (lastReturnedOffset.offset < endOffset.offset) {
//         internalLog(s"** getEndOffset => $endOffset)")
//         lastReturnedOffset = endOffset
//       }

//       endOffset
//     }

//   }

//   override def commit(end: Offset): Unit = {
//     internalLog(s"** commit($end) lastOffsetCommitted: $lastOffsetCommitted")

//     val newOffset = TwitterOffset.convert(end).getOrElse(
//       sys.error(s"TwitterStreamMicroBatchReader.commit() received an offset ($end) that did not " +
//         s"originate with an instance of this class")
//     )

//     val offsetDiff = (newOffset.offset - lastOffsetCommitted.offset).toInt

//     if (offsetDiff < 0) {
//       sys.error(s"Offsets committed out of order: $lastOffsetCommitted followed by $end")
//     }

//     tweetList.trimStart(offsetDiff)
//     lastOffsetCommitted = newOffset
//   }

//   override def stop(): Unit = {
//     log.warn(s"There is a total of $incomingEventCounter events that came in")
//     stopped = true
//     if (twitterStream != null) {
//       try {
//         twitterStream.shutdown()
//       } catch {
//         case e: IOException =>
//       }
//     }
//   }

//   override def deserializeOffset(json: String): Offset = {
//     TwitterOffset(json.toLong)
//   }
//   override def readSchema(): StructType = {
//     TwitterStreamingSource.SCHEMA
//   }

//   private def internalLog(msg:String): Unit = {
//     debugLevel match {
//       case "warn" => log.warn(msg)
//       case "info" => log.info(msg)
//       case "debug" => log.debug(msg)
//       case _ =>
//     }
//   }
// }

// object MyStreamingSource {


//   val SCHEMA =
//     StructType(
//       StructField("text", StringType) ::
//       StructField("user", StringType) ::
//       StructField("userLang", StringType) ::
//       StructField("createdDate", TimestampType) ::
//       StructField("isRetweeted", BooleanType) ::
//       Nil)
// }

// class MyStreamBatchTask(myList:ListBuffer[Status])
//   extends DataReaderFactory[Row] {
//   override def createDataReader(): DataReader[Row] = new MyStreamBatchReader(myList)
// }

// class MyStreamBatchReader(myList:ListBuffer[Status]) extends DataReader[Row] {
//   private var currentIdx = -1

//   override def next(): Boolean = {
//     // Return true as long as the new index is in the seq.
//     currentIdx += 1
//     currentIdx < tweetList.size
//   }

//   override def get(): Row = {
//     val tweet = tweetList(currentIdx)
//     Row(tweet.getText, tweet.getUser.getScreenName, tweet.getUser.getLang, new Timestamp(tweet.getCreatedAt.getTime),
//         tweet.isRetweeted)
//   }

//   override def close(): Unit = {}
// }